datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Game {
  id          Int   @id @default(autoincrement())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String // relation scalar field (used in the `@relation` attribute above)

  boards Board[]

  teams Team[]
  
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Board {
  id          Int   @id @default(autoincrement())

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameId Int // relation scalar field (used in the `@relation` attribute above)
}

model Team {
  id          Int   @id @default(autoincrement())

  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameId      Int // relation scalar field (used in the `@relation` attribute above) 

  teamBoard TeamBoard
  teamBoardId Int
  // players     Player[]

  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamBoard {
  id          Int   @id @default(autoincrement())

  team Team @relation(fields: [teamId], references: [teamBoardId], onDelete: Cascade, onUpdate: Cascade)
  teamId Int  // relation scalar field (used in the `@relation` attribute above)

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boardId Int // relation scalar field (used in the `@relation` attribute above)
}

model Tile {
  id          Int   @id @default(autoincrement())

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boardId Int // relation scalar field (used in the `@relation` attribute above)

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId Int // relation scalar field (used in the `@relation` attribute above)

  points Int
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]
  games     Game[]
  tasks     Task[]
}

model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String // relation scalar field (used in the `@relation` attribute above)
}

model Task {
  id           String   @id @default(cuid())
  title        String
  defaultValue Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String // relation scalar field (used in the `@relation` attribute above)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
